<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title> {% block title %} {% endblock title %} </title>
    <!-- Bootstrap -->
    {% importnimja "resources/js/popper.min.js.nimja" %}
    {% importnimja "resources/js/bootstrap.bundle.min.js.nimja" %}
    {% importnimja "resources/css/animate.min.css.nimja" %}
    {% importnimja "resources/js/fontawesome.js.nimja" %}
    {% importnimja "resources/css/bootstrap.min.css.nimja" %}
</head>
<body style="background-color: #d1ffd1;">
    <div class="d-flex flex-row">
        <div>
            {% scope %}
                {% let overviewUrl = context.overviewUrl %}
                {% let sqlUrl = context.sqlUrl %}
                {% let currentPage = context.currentPage %}
                {% importnimja "resources/components/sidebar.nimja" %}
            {%  endscope %}
        </div>
        <div class="d-flex flex-column align-items-center w-100 min-vh-100 h-100">
            <a class="text-reset text-center" href="{{context.overviewUrl}}">
                <h1> Admin </h1>
            </a>

            <div class="mt-3 mb-5 w-100" style="max-width: 70rem;">
                <div class="mx-5">
                    {% block content %} {% endblock content %}
                </div>    
            </div>
        </div>

    </div>

    <script>
        // Enables all bootstrap tooltips on the page
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        /**
         * @description Adds an animation to an element and removes it once the animation has completed.
         * @param element The HTMLElement to be animated
         * @param animationName The name of the animation from animate.css to be used here. 
         * Basically the CSS class without the "animate__" prefix
         * @param prefix optional. The prefix to add to the animationName
         * @returns {void}
         */
        function animateElement(element, animationName, prefix = 'animate__'){
            if(element == null) throw "Invalid Input Exception. The given element is null";

            // We create a Promise and return it
            return new Promise((resolve, reject) => {
                const animationCSSClass = `${prefix}${animationName}`;
                element.classList.add(`${prefix}animated`, animationCSSClass);

                // When the animation ends, we clean the classes and resolve the Promise
                function handleAnimationEnd(event) {
                    event.stopPropagation();
                    element.classList.remove(`${prefix}animated`, animationCSSClass);
                    resolve('Animation ended');
                }

                element.addEventListener('animationend', handleAnimationEnd, {once: true});
            });
        }
    </script>
</body>
</html>